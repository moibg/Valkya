const { SlashCommandBuilder, PermissionFlagsBits, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const Config = require('../../models/Config');
const embedBuilder = require('../../utils/embedBuilder');

const FEATURES = [
  { key: 'xp', label: 'XP & Niveaux', emoji: 'üèÖ' },
  { key: 'economy', label: '√âconomie', emoji: 'üí∞' },
  { key: 'moderation', label: 'Mod√©ration', emoji: 'üõ°Ô∏è' },
  { key: 'tickets', label: 'Tickets', emoji: 'üé´' },
  { key: 'fun', label: 'Fun & Mini-jeux', emoji: 'üé≤' },
  { key: 'suggestions', label: 'Suggestions', emoji: 'üí°' },
  { key: 'polls', label: 'Sondages', emoji: 'üìä' },
  // Tu peux en ajouter autant que tu veux ici
];

module.exports = {
  data: new SlashCommandBuilder()
    .setName('features')
    .setDescription('Active ou d√©sactive les fonctionnalit√©s du bot'),
  async execute(interaction) {
    if (!interaction.member.permissions.has(PermissionFlagsBits.Administrator)) {
      return interaction.reply({
        embeds: [embedBuilder({
          title: '‚öôÔ∏è Permission refus√©e',
          description: 'Vous devez √™tre administrateur.',
          color: 0xED4245
        })],
        ephemeral: true
      });
    }

    let config = await Config.findOne({ guildId: interaction.guild.id });
    if (!config) config = await Config.create({ guildId: interaction.guild.id });

    const embed = embedBuilder({
      title: 'üîß Gestion des fonctionnalit√©s',
      description: FEATURES.map(f =>
        `${f.emoji} **${f.label}** : ${config.features?.[f.key] ? '‚úÖ Activ√©e' : '‚ùå D√©sactiv√©e'}`
      ).join('\n'),
      color: 0x5865F2,
      footer: { text: 'Clique sur un bouton pour activer/d√©sactiver.' }
    });

    if (FEATURES.length > 25) {
      return interaction.reply({
        embeds: [embedBuilder({
          title: '‚ùó Trop de fonctionnalit√©s',
          description: 'Discord limite √† 25 boutons maximum dans un message. R√©duis le nombre de fonctionnalit√©s ou adapte l‚Äôinterface.',
          color: 0xED4245
        })],
        ephemeral: true
      });
    }

    const rows = [];
    for (let i = 0; i < FEATURES.length; i += 5) {
      const buttons = FEATURES.slice(i, i + 5).map(f =>
        new ButtonBuilder()
          .setCustomId(`feature_${f.key}`)
          .setLabel(f.label)
          .setEmoji(f.emoji)
          .setStyle(config.features?.[f.key] ? ButtonStyle.Success : ButtonStyle.Secondary)
      );
      rows.push(new ActionRowBuilder().addComponents(buttons));
    }

    await interaction.reply({
      embeds: [embed],
      components: rows,
      ephemeral: true
    });
  }
};
