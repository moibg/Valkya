const { SlashCommandBuilder, PermissionFlagsBits } = require('discord.js');
const embedBuilder = require('../../utils/embedBuilder');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('removerole')
    .setDescription('Retire un r√¥le √† un membre')
    .addUserOption(option => option.setName('membre').setDescription('Membre √† qui retirer le r√¥le').setRequired(true))
    .addRoleOption(option => option.setName('role').setDescription('R√¥le √† retirer').setRequired(true)),
  async execute(interaction) {
    if (!interaction.member.permissions.has(PermissionFlagsBits.ManageRoles)) {
      return interaction.reply({ embeds: [embedBuilder({
        title: 'üõ°Ô∏è Permission refus√©e',
        description: 'Vous devez avoir la permission de g√©rer les r√¥les.',
        color: 0xED4245,
        footer: { text: 'Commande de mod√©ration' }
      })], flags: 64 });
    }
    const membre = interaction.options.getMember('membre');
    const role = interaction.options.getRole('role');
    if (!membre || !role) return interaction.reply({ embeds: [embedBuilder({
      title: 'üõ°Ô∏è Erreur',
      description: 'Membre ou r√¥le introuvable.',
      color: 0xED4245,
      footer: { text: 'Commande de mod√©ration' }
    })], flags: 64 });
    await membre.roles.remove(role);
    const embed = embedBuilder({
      title: 'üõ°Ô∏è R√¥le retir√©',
      description: `${role} retir√© √† ${membre}.`,
      color: 0xED4245,
      footer: { text: 'Commande de mod√©ration' }
    });
    await interaction.reply({ embeds: [embed] });
  }
};
